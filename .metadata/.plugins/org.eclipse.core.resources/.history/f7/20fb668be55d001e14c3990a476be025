package com.promount.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mysql.cj.xdevapi.Statement;
import com.promount.model.Employee;

public class TableCreationCRUD {
	private String jdbcURL = "jdbc:mysql://localhost:3306/adv_java";
	private String jdbcUsername = "root";
	private String jdbcPassword = "root";

	private static final String INSERT_DEPARTMENT_SQL = "INSERT INTO department" + "(department_name) VALUES "
			+ " (?);";
	private static final String INSERT_EMPLOYEE_SQL = "INSERT INTO employees"
			+ "(fullName, email, phone, department_id, profileUrl, password) VALUES " + " (?, ?, ?, ?, ?, ?);";

	private static final String FIND_BY_ID_DEPT_SQL = "SELECT id FROM department WHERE department_name=?";

	private static final String VALIDATE_USER_SQL = "SELECT * FROM employees WHERE email=? AND password=?";

	private static final String FETCH_USER_SQL = "SELECT e.id, e.fullName, e.email, e.phone, d.department_name, e.profileUrl\r\n"
			+ "FROM employees e\r\n" + "INNER JOIN department d ON e.department_id = d.id\r\n" + "WHERE e.email =?;";

	private static final String FIND_USER_BY_ID_SQL = "SELECT e.id, e.fullName, e.email, e.phone, e.password, d.department_name, e.profileUrl\r\n"
			+ "FROM employees e\r\n" + "INNER JOIN department d ON e.department_id = d.id\r\n" + "WHERE e.id=?;";

	private static final String UPDATE_DEPARTMENT_SQL = "UPDATE department SET department_name=? WHERE id=?";

	private static final String UPDATE_EMPLOYEE_SQL = "UPDATE employees SET fullName=?, email=?, phone=?, department_id=?, profileUrl=?, password=? WHERE id=?";

	protected Connection getConnection() {
		Connection connection = null;
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
		} catch (SQLException e) {

			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return connection;
	}

	private static final String createTableEmployeeSQL = "create table employees (\r\n"
			+ "  id  int(3) not null auto_increment primary key,\r\n" + "  fullName varchar(40),\r\n"
			+ "  email varchar(30),\r\n" + "  phone decimal,\r\n" + "  department_id int \r\n, "
			+ "  FOREIGN KEY (department_id) REFERENCES department(id), \r\n" + "  profileUrl varchar(100), \r\n"
			+ "  password varchar(20)\r\n" + ");";

	private static final String createTableDepartmentSQL = "create table department (\r\n"
			+ " id int(3) not null auto_increment primary key, \r\n" + " department_name varchar(20)\r\n" + ");";

	public void createTable() {
		try (Connection connection = getConnection()) {
			PreparedStatement departmentSQL = connection.prepareStatement(createTableDepartmentSQL);
			PreparedStatement employeeSQL = connection.prepareStatement(createTableEmployeeSQL);

			departmentSQL.execute();
			employeeSQL.execute();

			// connection.prepareStatement(createTableDepartmentSQL);
			// connection.prepareStatement(createTableEmployeeSQL);
		} catch (SQLException e) {
			printSQLException(e);
		}

	}

	public void insertData(Employee emp) {
		int deptId;
		ResultSet rs;
		try (Connection connection = getConnection()) {
			PreparedStatement employeeStatement = connection.prepareStatement(INSERT_EMPLOYEE_SQL);
			PreparedStatement findDeptIdStatement = connection.prepareStatement(FIND_BY_ID_DEPT_SQL);

			findDeptIdStatement.setString(1, emp.getTech().toLowerCase());
			rs = findDeptIdStatement.executeQuery();

			if (!rs.next()) {
				PreparedStatement departmentStatement = connection.prepareStatement(INSERT_DEPARTMENT_SQL);

				departmentStatement.setString(1, emp.getTech());
				departmentStatement.executeUpdate();
			}
			rs = findDeptIdStatement.executeQuery();

			employeeStatement.setString(1, emp.getFullName());
			employeeStatement.setString(2, emp.getUserName());
			employeeStatement.setLong(3, emp.getPhone());

			if (rs.next()) {
				deptId = rs.getInt("id");
				employeeStatement.setInt(4, deptId);
			}

			employeeStatement.setString(5, emp.getProfilePhotoUrl());
			employeeStatement.setString(6, emp.getPassword());
			employeeStatement.executeUpdate();

		} catch (SQLException e) {
			printSQLException(e);
		}
	}

	private void printSQLException(SQLException ex) {
		for (Throwable e : ex) {
			if (e instanceof SQLException) {
				e.printStackTrace(System.err);
				System.err.println("SQLState: " + ((SQLException) e).getSQLState());
				System.err.println("Error Code: " + ((SQLException) e).getErrorCode());
				System.err.println("Message: " + e.getMessage());
				Throwable t = ex.getCause();
				while (t != null) {
					System.out.println("Cause: " + t);
					t = t.getCause();
				}
			}
		}
	}

	public boolean validateCredentials(String loginId, String loginPassword) {
		try (Connection connection = getConnection()) {
			PreparedStatement validateUserStatement = connection.prepareStatement(VALIDATE_USER_SQL);
			validateUserStatement.setString(1, loginId);
			validateUserStatement.setString(2, loginPassword);

			ResultSet fetchedUser = validateUserStatement.executeQuery();
			if (fetchedUser.next()) {
				return true;
			}
		} catch (SQLException e) {
			printSQLException(e);
		}
		return false;
	}

	public Employee fetchedAllData(String loginId) {
		try (Connection connection = getConnection()) {
			PreparedStatement validateUserStatement = connection.prepareStatement(FETCH_USER_SQL);
			validateUserStatement.setString(1, loginId);

			ResultSet fetchedUser = validateUserStatement.executeQuery();
			if (fetchedUser.next()) {
				Integer empId = (Integer) fetchedUser.getInt(1);
				String fullName = fetchedUser.getString(2);
				Long phoneNo = fetchedUser.getLong(4);
				String deptName = fetchedUser.getString(5);
				String profileUrl = fetchedUser.getString(6);
				Employee empData = new Employee(empId, fullName, phoneNo, deptName, profileUrl, loginId);
				return empData;
			}
		} catch (SQLException e) {
			printSQLException(e);
		}
		return null;
	}

	public Employee findEmployeeById(int id) {
		try (Connection connection = getConnection()) {
			PreparedStatement existUserOrNot = connection.prepareStatement(FIND_BY_ID_DEPT_SQL);
			existUserOrNot.setInt(1, id);

			ResultSet fetchedUser = existUserOrNot.executeQuery();
			if (fetchedUser.next()) {
				Integer empId = (Integer) fetchedUser.getInt(1);
				String fullName = fetchedUser.getString(2);
				String email = fetchedUser.getString(3);
				Long phoneNo = fetchedUser.getLong(4);
				String password = fetchedUser.getString(5);
				String deptName = fetchedUser.getString(5);
				String profileUrl = fetchedUser.getString(6);
				Employee empData = new Employee(empId, fullName, phoneNo, deptName, profileUrl, email, password);
				return empData;
			}
		} catch (SQLException e) {
			printSQLException(e);
		}
		return null;
	}

	public void update(Employee existEmp) {
		ResultSet rs;
		try (Connection connection = getConnection()) {
			PreparedStatement updateEmpStatement = connection.prepareStatement(UPDATE_EMPLOYEE_SQL);
			PreparedStatement findDeptIdStatement = connection.prepareStatement(FIND_BY_ID_DEPT_SQL);
			PreparedStatement updateDeptStatement = connection.prepareStatement(UPDATE_DEPARTMENT_SQL);

			findDeptIdStatement.setString(1, existEmp.getTech().toLowerCase());
			rs = findDeptIdStatement.executeQuery();
			
			if (!rs.next()) {
				PreparedStatement insertDepartmentStatement = connection.prepareStatement(INSERT_DEPARTMENT_SQL);

				insertDepartmentStatement.setString(1, existEmp.getTech());
				insertDepartmentStatement.executeUpdate();
			}
			rs = findDeptIdStatement.executeQuery();
		} catch (SQLException e) {
			printSQLException(e);
		}
	}
}
